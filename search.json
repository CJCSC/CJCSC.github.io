[{"title":"C++基礎教學","url":"http://cjcsc.github.io/2021/04/16/cpp-basis/","content":"\n作者：李佳樺\n日期：2021/04/16\n\n 基礎架構\n// 使用名稱為iostream的標頭檔，用於資料輸入輸出 (應該吧？\n#include &lt;iostream> \nusing namespace std; // 定義名稱為 std 的命名空間 \nint main()&#123; // 主程式，程式由此開始執行\n    cout &lt;&lt; \"Hello World!\" &lt;&lt; endl; // 輸出指令\n    return 0; // 程式結束，可省略\n&#125;\n 標頭檔 Header files\n標頭檔能夠引入函式庫中，如 camth, cctype …\nC++ 使用了 #include 這個指令來載入標頭檔\n//萬用標頭檔\n#include &lt;bits/stdc++.h> \n 註解 comment\n在程式碼中做適當的註解能使其更容易閱讀\n// 這是單行註解\n\n/*\n    這是多行註解\n    可以換行\n*/\n 縮排 Indent\n我們可以用 TAB 鍵來進行縮排\n增加程式碼的可讀性\n如果只有單行敘述句則可以省略大括號\n// 未縮排\nwhile(1)&#123;cout &lt;&lt; 12 &lt;&lt; endl;&#125;\n// 縮排後\nwhile(1)&#123;\n    cout &lt;&lt; 12 &lt;&lt; endl;\n&#125;\n// 省略\nwhile(1)\n    cout &lt;&lt; 12 &lt;&lt; endl;\n 敘述句\n敘述句以分號 ; 隔開\nint a;\na=5;\ncout &lt;&lt; a &lt;&lt; endl;\n 區塊 Block\nC++用大括號 { } 來表示一個區塊\n通常加在函式、條件句後\n// while\nwhile(1)&#123;\n    cout &lt;&lt; \"Hello\";\n&#125;\n\n// if\nif(a>0)&#123;\n    cout &lt;&lt; \"Hey\";\n&#125;\n    \n// 建立函式\nint func(int a, int b)&#123;\n    return a+b;\n&#125;\n 輸入輸出 input &amp; output\n在C++中，我們使用 cin 和 cout 以在終端機獲取和輸出資料\n&lt;&lt; 和 &gt;&gt; 代表資料流方向\nint a; // 宣告變數 a\ncin >> a; //輸入 a\ncout &lt;&lt; a+1; //輸出a+1\n// input: 5  \n// output: 6\n我們還能使用多個 &lt;&lt; 或 &gt;&gt; 來輸入輸出多個資料\nint a, b; // 宣告變數 a b\ncin >> a >> b; \n\ncout &lt;&lt; \"總合為: \" &lt;&lt; a+b &lt;&lt; endl; // 輸出 a+b\n// input: 2 3\n// output: 總合為: 5\n 習題\nzerojudge d483\nCJOJ 1003\n 命名規則\nC++的變數名稱遵守著一定的規則\n當名稱和關鍵字(keyword)重複或不合法時，會造成無法編譯的錯誤\n\n變數名稱的第一個字不可為數字( 0~9 )或符號( @ , &amp; , # … )但可為底線( _ )\n變數名稱不可使用中文\n英文字母的大小寫不同，代表的東西也不同，因此我們可以利用此特性來避開關鍵字的使用\n\n 常數 CONSTANT\n常數在程式中為固定不變的數，無法更改其初始值\n我們可以使用 #define 和 const 來定義或宣告一個常數\n#define Pi 3.14159\n// #define 可以用來定義一個字詞，當那個詞被編譯時，會被轉換成所定義的程式碼\n// Pi 常數名稱 \n// 3.14159 常數初始值\n\nconst double Pi 3.14159\n// const 宣告這個數為常數\n// double 常數型態，不可省略\n 資料型態 DATA TYPE\n\n\n\n資料型態\n中文意義\n位元組(byte)\n範圍\n\n\n\n\nshort\n短整數\n2\n-32768 ~ 32767\n\n\nint\n整數\n4\n-2,147,483,648 ~ 2,147,483,647\n\n\nlong long int\n長整數\n8\n‘−9.22×1018 9.22×1018-9.22\\times 10^{18}~9.22\\times 10^{18}−9.22×1018 9.22×1018’\n\n\nchar\n字元\n4\n0 ~ 255\n\n\nbool\n布林值\n1\nfalse 或 true (0 或 1)\n\n\nfloat\n浮點數\n4\n‘1.17×10−38 3.4×10381.17\\times 10^{-38}~3.4\\times 10^{38}1.17×10−38 3.4×1038’\n\n\ndouble\n倍浮點數\n8\n‘2.25×10−308 1.79×103082.25\\times 10^{-308}~1.79\\times 10^{308}2.25×10−308 1.79×10308’\n\n\n\n\n浮點數的有效位數至小數點後第7位，而倍浮點數的有效位數至小數點後第15位\n\n 有號無號 SIGNED &amp; UNSIGNED\n型態可以分成 有號 ( signed ) 和 無號 ( unsigned ) 兩種\n預設值為有號\nshort a; // 有號整數 -32768 ~ 32767\nunsigned short b //無號整數 0 ~ 65535\n 溢位 OVERFLOW\n如果指定給變數的值超過變數型態的範圍，將會發生溢位的錯誤\n\n編譯器不會對可能會溢位的程式碼發出警告\n\nshort a = 32768; // 範圍: -32768 ~ 32767\ncout &lt;&lt; a &lt;&lt; endl; // output: -32768\n 跳脫字元 ESCAPE CHARACTER\n在反斜線 \\ 後加上字元\n用於對電腦的命令或表示不可列印的字元\n\n\n\n跳脫字元\n結果\n\n\n\n\n\\a\n讓蜂鳴器發出嗶聲 ( alarm )\n\n\n\\b\n退後一格 ( backspace )\n\n\n\\f\n換頁 ( form feed )\n\n\n\\n\n換行 ( line feed )\n\n\n\\r\n歸位 ( carriage return )\n\n\n\\t\n水平制表 ( horizontal tab )\n\n\n\\v\n垂直製表 ( vertical tab )\n\n\n\\‘\n顯示單引號 ’\n\n\n\\“\n顯示雙引號 “\n\n\n\\ \\\n顯示反斜線 \\\n\n\n\n 資料型態轉換\ndouble a = 1.23;\nint b = a; // 1.23 -->  1 (無條件捨去)\ncout &lt;&lt; (int)a; //強制轉換型態 浮點數 --> 整數\n\nint p = 2;\ndouble q = 1.2;\ncout &lt;&lt; p+q; // 3.2\n// 先把 p 轉換成 double，再與 q 相加\n\n大型態轉換至小型態時將會失去原本的精度\n編譯器進行不同型態的運算時會先把精度小的數字轉換成精度大的\n\n 習題\nCJOJ 1002\n 運算子\n在程式中，我們能使用運算元和運算子來進行算數運算、邏輯判斷…等\n其中運算元可以是常數、變數、數字或是有回傳值的函式\n我們將運算元和運算子的組合稱為運算式\n 算數運算子\n\n\n\n運算子\n功能\n用法\n\n\n\n\n+\n加\na + b\n\n\n-\n減\na - b\n\n\n*\n乘\na * b\n\n\n/\n除\na / b\n\n\n%\n取餘數\na % b\n\n\n++\n遞增\na++\n\n\n–\n遞減\nb–\n\n\n\nint a=13;\nint b=5;\ncout &lt;&lt; a + b; // 18\ncout &lt;&lt; a - b; // 8\ncout &lt;&lt; a * b; // 65\ncout &lt;&lt; a / b; // 2\ncout &lt;&lt; a % b; // 3\n遞增和遞減根據位置的不同而有不同的結果\nint a=2;\ncout &lt;&lt; a++; // 2\ncout &lt;&lt; a; // 3\n\nint b=2;\ncout &lt;&lt; ++b; //3\ncout &lt;&lt; b; //3\n\n當 ++ 或 – 在前面時，本身會先加 1 後再進行運算\n而當 ++ 或 – 在後面時，進行運算後本身才加上 1\n\n 複合指定運算子\n我們用等號 (指定運算子) = 來指定變數的值\n而 指定運算子 搭配 算術運算子 後形成 複合指定運算子\n\n\n\n運算子\n用法\n\n\n\n\n+=\na+=b\n\n\n-=\na-=b\n\n\n*=\na*=b\n\n\n/=\na/=b\n\n\n%=\na%=b\n\n\n\nint a=5;\na+=3; // a=a+3 將 a 的值加上 3 之後再指定給 a  ∴ a = 5 + 3 = 8\na-=2; // a=a-2 同理，將 a 的值減去 2 之後再指定給 a  ∴ a = 8 - 2 = 6\na*=4; // a=a*4  ∴ a = 6 * 4 =24\na/=3; // a=a/3 ∴ a = 24 / 3 = 8\na%=7; // a=a%7 ∴ a = 8 % 7 = 1\n 關係運算子\n我們能用下列運算子來進行條件的判斷：\n\n\n\n運算子\n功能\n用法\n\n\n\n\n&gt;\n大於\na&gt;b\n\n\n&lt;\n小於\na&lt;b\n\n\n==\n等於\na==b\n\n\n&gt;=\n大於等於\na&gt;=b\n\n\n&lt;=\n小於等於\na&lt;=b\n\n\n!=\n不等於\na!=b\n\n\n\nint a=3, b=5, c=7;\ncout &lt;&lt; (a>b); // false\ncout &lt;&lt; (b==5); // true\ncout &lt;&lt; (c>=7); // true\ncout &lt;&lt; (a!=2); // true\n 邏輯運算子\n我們能使用邏輯運算子能進行邏輯的判斷\n\n\n\n運算子\n功能\n用法\n\n\n\n\n&amp;&amp;\n且 (交集)\nA &amp;&amp; B\n\n\n||\n或 (聯集)\nA || B\n\n\n!\n不等於\n!A\n\n\n\nint a=3, b=5, c=7;\ncout &lt;&lt; (a>2 &amp;&amp; c&lt;6); // false\ncout &lt;&lt; (b==5 || a>4) // true\ncout &lt;&lt; !(a>=3 &amp;&amp; c&lt;=8) // false\n\nA &amp;&amp; B ，當A和B皆為 True 時，結果為 True，其餘皆為 False\nA || B ，當A和B皆為 False 時，結果為 False，其餘皆為 True\n\n 條件運算子\n條件運算子 又稱為 三元運算子，其傳回值依條件式的結果而定\n如果條件式的結果為 True，則回傳冒號前的值，若結果為 False，則回傳冒號 : 後的值\nint a=5, b=9;\ncout &lt;&lt; (a>b ? \"yes\" : \"no\"); // no\n 條件判斷與迴圈\n 條件判斷\n IF\n當 if 的判斷條件為 True 時，將會執行 if 區塊內的敘述\n若結果為 False ，則跳過此區塊\nint a=7, b=9;\nif(a>b)&#123; // False\n    cout &lt;&lt; \"Hello\" &lt;&lt; endl; // 跳過 if 區塊內的敘述\n&#125;\nif(b>5)&#123; // True\n    a+=b; // a=a+b ∴a=16\n&#125;\n IF … ELSE\n當 if 的判斷條件為 True 時，將會執行 if 區塊內的敘述\n若結果為 False ，則執行 else 區塊內的敘述\nint a=5, b=7;\nif(a>b)&#123; // False\n    cout &lt;&lt; \"OK\" &lt;&lt; endl;\n    // 跳過 if 區塊內的敘述\n&#125;\nelse&#123; // 當 if 條件結果為 False\n    cout &lt;&lt; \"NO\" &lt;&lt; endl; // NO\n    // 執行 else 區塊內的敘述\n&#125;\n ELSE IF\nelse if 可以放在 if 和 else 中間，用以判斷其他條件\nint a=5, b=7;\nif(a>b)&#123; // False\n    cout &lt;&lt; \"Perfect\" &lt;&lt; endl;\n    // 跳過此區塊內的敘述，進入 else if 的區塊 \n&#125;\nelse if(a&lt;4)&#123; // False\n    cout &lt;&lt; \"fabulous\" &lt;&lt; endl;\n    // 跳過此區塊內的敘述 \n&#125;\nelse if(b>5)&#123; // True\n    cout &lt;&lt; \"Nice\" &lt;&lt; endl; // Nice\n    // 當上面區塊的條件結果為 False 且自己的條件結果為 True\n    // 跳出流程判斷\n&#125;\nelse&#123;\n    cout &lt;&lt; \"Good\" &lt;&lt; endl;\n    // 不會執行到此區塊\n&#125;\n\nelse if 的數量可以根據自己所需增加數量\n\n SWITCH\nswitch 可以用來判斷單一條件\n在條件式數量多的情況下，能使程式碼變得相對簡潔\nint a=10;\nswitch(a/3)&#123; // a/3 是switch的條件句\n    // 如果 a/3 和 case 後的數字或字元相等，則執行此case區塊的敘述\n    case 2: // a/3 != 2   False\n        cout &lt;&lt; \"Red\" &lt;&lt; endl;\n        break;\n    case 3: // a/3 == 3 結果為 True ，進入敘述\n        cout &lt;&lt; \"Green\" &lt;&lt; endl; // Green\n        break; // 跳出 switch 的判斷流程\n    case 4: // 此 case 區塊不會被執行\n        cout &lt;&lt; \"Blue\" &lt;&lt; endl;\n        break;\n    default: // 若上面所有 case 皆不符合，則執行 default 區塊的敘述\n        cout &lt;&lt; \"Color\" &lt;&lt; endl;\n        break;\n&#125;\n\ncase 後面必須加上冒號，而不是大括號\ncase 的敘述結束後，需要加上 break ，跳出 switch，否則會繼續向下執行另一個 case\n\n 迴圈\n FOR\nfor 迴圈必須事先指定變數的初始值、結束條件及每執行一次變數的增減值\nfor(int i=0;i&lt;10;i++)&#123;\n    // Code\n&#125;\nint i=0 : 指定變數初始值\ni&lt;10 : 結束條件，當 i 等於 10 時，跳出迴圈\ni++ : 控制變數增減，每跑一次迴圈就執行一次\nfor(int i=0;i&lt;5;i++)&#123;\n    cout &lt;&lt; \"i=\" &lt;&lt; i &lt;&lt; endl;\n&#125;\n/* \n    當 i=0 ，判斷 i&lt;5 為 True ，輸出 i=0 ， i 加 1\n    當 i=1 ，判斷 i&lt;5 為 True ，輸出 i=1 ， i 加 1\n    當 i=2 ，判斷 i&lt;5 為 True ，輸出 i=2 ， i 加 1\n    當 i=3 ，判斷 i&lt;5 為 True ，輸出 i=3 ， i 加 1\n    當 i=4 ，判斷 i&lt;5 為 True ，輸出 i=4 ， i 加 1\n    當 i=5 ，判斷 i&lt;5 為 False ，跳出迴圈\n*/\n WHILE\n當 while 迴圈的條件句為 True 時，便會重複執行下去\n我們可以在 while 迴圈中加入變數，進行迴圈次數的控制\nint a=5;\nwhile(a>0)&#123; // while 的條件句， 當結果為 False， 跳出迴圈\n    cout &lt;&lt; \"a=\" &lt;&lt; a &lt;&lt; endl;\n    a--;\n&#125;\n/*\n    當 a=5 ，判斷 a>0 為 True，輸出 a=5 ，a減1 \n    當 a=4 ，判斷 a>0 為 True，輸出 a=4 ，a減1\n    當 a=3 ，判斷 a>0 為 True，輸出 a=3 ，a減1\n    當 a=2 ，判斷 a>0 為 True，輸出 a=2 ，a減1\n    當 a=1 ，判斷 a>0 為 True，輸出 a=1 ，a減1 \n    當 a=0 ，判斷 a>0 為 False，跳出迴圈\n*/\n DO … WHILE\n我們可以使用 do … while 來使我們的程式碼至少被執行一次\nint i=1\ndo&#123;\n    // 進來迴圈時，先不進行條件判斷\n    cout &lt;&lt; \"Only one\" &lt;&lt; endl; \n    i--;\n&#125;while(i>0); // 如果條件句為 True ，再次進入迴圈，否則跳出迴圈\n 迴圈控制指令\n我們可以藉由迴圈控制指令，使的迴圈直接進入下一次的迴圈或結束\n常見的指令有 break 、 continue\n CONTINUE\nfor(int i=1;i&lt;11;i++)&#123; // 從 i=1 執行到 i=10\n    if(i%2==0) //如果i整除2\n        continue; // 進入下一次迴圈\n    // 只有當 i 不被 2 整除才會被輸出\n    cout &lt;&lt; i &lt;&lt; \" \"; // 1 3 5 7 9\n&#125;\n BREAK\nfor(int i=1;i&lt;11;i++)&#123; // 從 i=1 執行到 i=10\n    if(i%2==0) //如果i整除2\n        continue; // 進入下一次迴圈\n    // 只有當 i 不被 2 整除才會被輸出\n    cout &lt;&lt; i &lt;&lt; \" \"; // 1 3 5 7 9\n    \n&#125;\n 習題\nCJOJ 1001\nCJOJ 1004\nCJOJ 1005\nCJOJ 1007\nCJOJ 1008\nCJOJ 1021\n 陣列\n 一維陣列\n陣列是由許多相同型態的變數所串連而成的\n我們可以將陣列想成各自有不同編號的收納盒\n\n第一格的編號為 0 ，第二格的編號為 1 … 以此類推\n// 宣告陣列\nint arr[3]=&#123;4,5,6&#125;\n// 資料型態 陣列名稱[陣列大小]=&#123;初始值0,初始值1,...&#125;\n\n// 取得存在陣列中的值\narr[1] // 5\n// 陣列名稱[索引值]\n\n\n陣列的大小是固定不變的\n如果陣列的大小超過記憶體的大小，將會發生錯誤\n這時可以試著在 main 的區塊外宣告陣列\n宣告陣列時不一定要給予初始值\n不過我們可以將陣列中所有值初始化為 0\n\nint array[10] = &#123; 0 &#125;\n\n 二維陣列\n我們可以把二維陣列想像成一個平面的收納盒\n\nint array2D[3][3] = &#123; &#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125; &#125;;\ncout &lt;&lt; array2D[1][0] + array2D[2][2] + array2D[0][2] &lt;&lt; endl; // 16\n/*\n    1 2 3\n    4 5 6\n    7 8 9\n    \n    array2D[1][0] → 第 2 列 第 1 行 → 4\n    array2D[2][2] → 第 3 列 第 3 行 → 9\n    array2D[0][2] → 第 1 列 第 3 行 → 3\n*/\n 訪問陣列\n我們能利用迴圈來訪問陣列\nint array[3] = &#123;1, 2, 3&#125;; // 宣告陣列\nfor(int i=0;i&lt;3;i++)&#123; // 從 i=0 到 i=2\n    cout &lt;&lt; array[i] &lt;&lt; endl; //輸出索引值為 i 的值\n&#125;\n\nint inputArray[5]; // 宣告一個空陣列\nfor(int i=0;i&lt;5;i++)&#123; // 從 i=0 到 i=5\n    cin >> inputArray[i]; // 讓使用者輸入陣列的值\n&#125;\n\nint array2d[3][3] = &#123; &#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125; &#125;;\nfor(int i=0;i&lt;3;i++)&#123; // 從 i=0 到 i=2\n    // 記得相同區塊內不能有名稱相同的變數\n    for(int j=0;j&lt;3;j++)&#123; // 從 j=0 到 j=2\n        array2d[i][j]+=2; // 全部加2\n        // &#123; &#123;3,4,5&#125;,&#123;6,7,8&#125;,&#123;9,10,11&#125; &#125;\n    &#125;\n&#125;\n/* \n    訪問順序: \n    array2d[0][0] => array2d[0][1] => array2d[0][2] =>\n    array2d[1][0] => array2d[1][1] => array2d[1][2] =>\n    array2d[2][0] => array2d[2][1] => array2d[2][2]\n*/\n 氣泡排序法 - 概念\n從陣列的開頭不斷的比較兩個數字\n如果前面的數字比較大，則兩者交換，反之則不交換\n第一次要檢查陣列長度-1次，隨後每次檢查的次數會減1，直到完成排序\n\n\nC++的函式庫中有內建排序函數 sort()：\nint arr[3] = &#123;2,3,1&#125;\nsort(arr, arr+3); // &#123;1,2,3&#125;\n\n 練習題\nCJOJ 1019\nzerojudge c067\n","categories":["C語言"],"tags":["C++"]},{"title":"Python 基礎教學","url":"http://cjcsc.github.io/2021/04/16/python-basis/","content":"\n作者：李福昌 日期：2021/04/16\nPython從新手到精熟location.href='https://leefuuchang.github.io/PythonTutorial/PythonTutorial.html';\n\n","categories":["Python"],"tags":["Python"]},{"title":"Java 基礎教學","url":"http://cjcsc.github.io/2021/04/16/java-basis/","content":"\n作者：王嘉瑋\n日期：2021/04/16\n\n 壹、環境安裝\n 一、JDK 介紹\nJava Development Kit（JDK）是昇陽電腦針對Java開發人員發布的免費軟體開發套件（SDK，Software development kit）。\n作為Java語言的SDK，普通使用者並不需要安裝JDK來執行Java程式，而只需要安裝JRE（Java Runtime Environment）。而程式開發者必須安裝JDK來編譯、除錯程式。\n 二、JDK 安裝\n\n\nJDK 下載網址(此教學採用Java SE 8 JDK，並舉 Windows x64 為例)：https://www.oracle.com/tw/java/technologies/javase/javase-jdk8-downloads.html\n\n\n安裝完畢後，進入控制台&gt;系統及安全性&gt;系統&gt;進階系統設定&gt;環境變數&gt;系統變數&gt;新增&gt;變數名稱：JAVA_HOME&gt;變數值：(ex:C:\\Program Files\\Java\\jdk-8)\n\n\n\n設定PATH，環境變數&gt;系統變數(Path)&gt;編輯&gt;新增&gt;\n輸入JDK與JRE位置\nJDK：%JAVA_HOME%\\bin\nJRE：%JAVA_HOME%\\jre\\bin\n\n\n 三、測試\n\n設定完畢，進行測試\n開啟命令提示字元(cmd)\n輸入 java -version(沒有出現Error表示設定成功)\n\n 貳、程式設計\n 一、IDE 整合開發工具介紹\n\nApache NetBeans\nEclipse(企業開發常用)\n\n 二、變數介紹(Variable)\nps：和其他程式語言C/C++、C# 大同小異\n\n\n\n\n類別\n資料型態\n位元數\n範圍\n\n\n\n\n整數\nbyte\n8位元數\n範圍：-128 ～ 127\n\n\n整數\nshort\n16位元數\n範圍：-32768 ～ 32767\n\n\n整數\nint\n32位元數\n範圍：-2147483648 ～ 2147483647\n\n\n整數\nlong\n64位元數\n範圍：-9223372036854775808 ～ 9223372036854775807\n\n\n浮點數\nfloat\n32位元數\n範圍：-3.402823E38~-1.401298E-45(ps:E-45為10的-45次方)\n\n\n浮點數\ndouble\n64位元數\n範圍：-1.797693134E3.8~4.9406564584124E-324\n\n\n布林值\nboolean\n1位元數\ntrue或false(注意:不像C/C++，可以以0或1代表false或true)\n\n\n字元\nchar\n16位元數\n範圍：’\\u0000’ - ‘\\uffff’(ps: Unicode編碼)\n\n\n\n 三、基本宣告\n\n最上方 package(包裹)：專案所在之資料夾位置\n\npackage com.sample.app;\n\n下方 import(導入)：非本檔案之外來類別(class)\n\nimport java.io.PrintStream;\n補充：Java SE 8 API(查詢Java所提供之所有API)：https://docs.oracle.com/javase/8/docs/api/\n\n類別 class：\n\nclass MyFirst&#123;&#125;\n\n存取修飾字(Modifier)：public、private、protected、default(可放在class類別前、method方法前、變數宣告前)\n\n\n\n\n存取修飾字\n權限\n\n\n\n\npublic\n皆可存取\n\n\nprivate\n同一個class才可存取\n\n\nprotected\n同一個package的class才可存取，不同的package得要有繼承關係才可存取(繼承為何，請看後面章節)\n\n\ndefault\n同一個package的class才可存取\n\n\n\npublic class MyFirstApp&#123;&#125;\n\nprivate void method()&#123;&#125;\n\nprivate int a;\n\n\n\n存取修飾字\n同一個class\n同一個package\n子類別child class\n不同package\n\n\n\n\npublic\nYes\nYes\nYes\nYes\n\n\nprivate\nYes\n\n\n\n\n\nprotected\nYes\nYes\nYes\nYes(要繼承)\n\n\ndefault\nYes\nYes\n\n\n\n\n\n\n主方法 main method(注意:對初學者而言，宣告方式必須一模一樣)：\n\npublic static void main(String[] args)&#123;&#125;\n\nmain 只是一個方法名稱 並非是關鍵字\nstatic(可以想成共用，往後會介紹) 這一個功能非物件化 就是直接執行\n直接跑第一支程式，不是被呼叫的，沒有回應值，所以宣告 void\n\n\n基本輸出\n\nSystem.out.println(\"您好\");\n原本輸出寫法(不急!請繼續看下去，往後會介紹)：\nPrintStream out = System.out;\n\nout.println(\"您好\");\n 四、運算符號\n 算術(Arithmetic)運算符號\n\n\n\n運算符號\n功能敘述\n\n\n\n\n+\n加\n\n\n*\n乘\n\n\n-\n減\n\n\n/\n除\n\n\n%\n餘數\n\n\n++\n加一\n\n\n--\n減一\n\n\n\n 邏輯(logic)運算符號\n\n\n\n運算符號\n功能敘述\n\n\n\n\n&gt;\n大於\n\n\n&lt;\n小於\n\n\n&gt;=\n大於等於\n\n\n&lt;=\n小於等於\n\n\n==\n等於\n\n\n!=\n不等於\n\n\n&amp;&amp;\nlogic AND\n\n\n||\nlogic OR\n\n\n!\nlogic NOT\n\n\ninstanceof\nreference instanceof ClassName // 判斷reference所指到的物件其型態是否和ClassName相容\n\n\n\n 位元(Bit)運算符號\n\n\n\n運算符號\n功能敘述\n\n\n\n\n&amp;\nbit AND\n\n\n&lt;&lt;\nleft bit shift\n\n\n|\nbit OR\n\n\n&gt;&gt;\nright bit shift with sign\n\n\n^\nbit XOR\n\n\n~\n1補數\n\n\n&gt;&gt;&gt;\n同&gt;&gt;但左邊一律補零\n\n\n\n 其他運算符號\n\n\n\n運算元\n功能敘述\n\n\n\n\n=\n將右邊的值複製到左邊的變數\n\n\n(type)\n將右邊的數值或reference轉換成type型別\n\n\n+=\n將右邊的數值加上左邊的數值然後指定給左邊的變數\n\n\n?:\n若?左邊成立則做:左邊否則做:右邊\n\n\n,\n合併兩個運算視為一個敘述\n\n\n(運算式)\n表示()內優先運算\n\n\n.\nReference.ObjectMember或ClassName.ClassName // 存取物件或類別成員\n\n\nnew\n產生物件\n\n\n\n 優先權\n\n\n\n種類\n運算符號\n結合順序\n\n\n\n\ngroup\n(op)\nleft to right\n\n\npostfix\n[] . (params) op++ op–\nright to left\n\n\nprefix\n++op --op +op -op ~ !\nright to left\n\n\ncreation or casting\nnew (type)op\nright to left\n\n\nmultiplicative\n* / %\nleft to right\n\n\nadditive\n+ -\nleft to right\n\n\nshift\n&lt;&lt; &gt;&gt; &gt;&gt;&gt;\nleft to right\n\n\nrelational\n&lt; &gt; &lt;= &gt;= instanceof ==\nleft to right\n\n\nequality\n== !=\nleft to right\n\n\nbitwise and\n&amp;\nleft to right\n\n\nbitwise exclusive or\n^\nleft to right\n\n\nbitwise inclusive or\n|\nleft to right\n\n\nlogical and\n&amp;&amp;\nleft to right\n\n\nlogical or\n||\nleft to right\n\n\nconditional\n? :\nright to left\n\n\nassignment\n= += -= *= /= %= &amp;= ^= |= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=\nright to left\n\n\nseperator\n,\nleft to right\n\n\n\n 五、完整程式碼\npackage com.sample.app;\n\nimport java.io.PrintStream;\n\npublic class MyFirstApp &#123;\n\n\tpublic static void main(String[] args) &#123;\n\t\tPrintStream out = System.out;\n\t\tout.println(\"您好\");\n        \n\t\tSystem.out.println(\"您好\");\n\t&#125;\n&#125;\n 參、基礎演算法\n 一、泡沫排序法(bubble sort)\n\n基礎泡沫排序實作\n\npackage bubble_sort;\n\npublic class bubbleSort &#123;\n\tpublic static void main(String[] args) &#123;\n        //宣告陣列\n\t\tint[] arr = new int[] &#123;1,5,2,3,7,8,9,4&#125;;\n\t\t//泡沫排序演算法\n\t\tfor(int i=0;i&lt;arr.length;i++) &#123;\n\t\t\tfor(int j=0;j&lt;arr.length-1;j++) &#123;\n\t\t\t\tif(arr[j]>arr[j+1]) &#123; //前>後 換位置\n\t\t\t\t\tint tmp = arr[j];\n\t\t\t\t\tarr[j] = arr[j+1];\n\t\t\t\t\tarr[j+1] = tmp;\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t&#125;\n        //取出陣列值\n\t\tfor(int i=0;i&lt;arr.length;i++) &#123;\n\t\t\tSystem.out.print(arr[i]);\n\t\t&#125;\n\t&#125;\n&#125;\n\n\n鍵盤輸入陣列，進行泡沫排序\n\npackage bubble_sort;\n\nimport java.util.Scanner;\n\npublic class bubbleSort &#123;\n\tpublic static void main(String[] args) &#123;\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint len;\n\t\tSystem.out.print(\"請輸入陣列長度：\");\n\t\tlen = scanner.nextInt();\n\t\tint[] arr = new int[len];\n\t\tfor(int i=0;i&lt;len;i++) &#123;\n\t\t\tSystem.out.printf(\"請輸入第%d個值：\", i+1);\n\t\t\tarr[i] = scanner.nextInt();\n\t\t&#125;\n\t\t//泡沫排序演算法\n\t\tfor(int i=0;i&lt;len;i++) &#123;\n\t\t\tfor(int j=0;j&lt;len-1;j++) &#123;\n\t\t\t\tif(arr[j]>arr[j+1]) &#123; //前>後 換位置\n\t\t\t\t\tint tmp = arr[j];\n\t\t\t\t\tarr[j] = arr[j+1];\n\t\t\t\t\tarr[j+1] = tmp;\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t&#125;\n\t\tfor(int i=0;i&lt;arr.length;i++) &#123;\n\t\t\tSystem.out.print(arr[i]);\n\t\t&#125;\n\t&#125;\n&#125;\n\n\n進階 method 回傳實作\n\npackage bubble_sort;\n\npublic class bubbleSort &#123;\n\tpublic static void main(String[] args) &#123;\n    //宣告陣列\n\t\tint[] arr = new int[] &#123;1,5,2,3,7,8,9,4&#125;;\n\t\tint[] arrs = sort(arr);\n\t\tfor(int a : arrs) &#123; //foreach\n\t\t\tSystem.out.print(a);\n\t\t&#125;\n\t&#125;\n\t\n\tprivate static int[] sort(int[] arr) &#123;\n\t\tint len = arr.length; //取得陣列長度\n\t\t//泡沫排序演算法\n\t\tfor(int i=0;i&lt;len;i++) &#123;\n\t\t\tfor(int j=0;j&lt;len-1;j++) &#123;\n\t\t\t\tif(arr[j]>arr[j+1]) &#123; //前>後 換位置\n\t\t\t\t\tint tmp = arr[j];\n\t\t\t\t\tarr[j] = arr[j+1];\n\t\t\t\t\tarr[j+1] = tmp;\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t&#125;\n\t\treturn arr;\n\t&#125;\n&#125;\n\n\n懶人實作排序法(Arrays.sort())\n\npackage bubble_sort;\n\nimport java.util.Arrays;\n\npublic class bubbleSort &#123;\n\tpublic static void main(String[] args) &#123;\n\t\tint[] arr = new int[] &#123;1,5,2,3,7,8,9,4&#125;;\n\t\tArrays.sort(arr);//內建排序法的時間複雜度為O(nlog n)\n\t\tfor(int a:arr) &#123;\n\t\t\tSystem.out.print(a);\n\t\t&#125;\n    &#125;\n&#125;\n\nJava SE 8 API-&gt;java.util-&gt;Arrays-&gt;sort\n","categories":["JAVA"],"tags":["JAVA"]},{"title":"機器學習 Machine-Learning 入門","url":"http://cjcsc.github.io/2021/04/16/machine-learning/","content":"\n作者：李福昌 日期：2021/04/16\nTensorflow機器學習入門教學\nlocation.href='https://leefuuchang.github.io/MLTutorial/MLTutorial.html';\n","categories":["Python"],"tags":["Python"]}]